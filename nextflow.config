// Global default params
params {
    // Input/output options
    input                      = null
    outdir                     = './results'
    sample_id                  = null
    config                     = null
    
    // Pipeline options
    max_memory                 = '128.GB'
    max_cpus                   = 16
    max_time                   = '240.h'
    
    // Google Cloud options
    google_project             = null
    google_zone                = 'us-central1-a'
    google_bucket              = null
}

// Process configuration
process {
    // Global process config
    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 6.GB * task.attempt, 'memory' ) }
    time   = { check_max( 4.h  * task.attempt, 'time'   ) }

    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'

    // Process-specific resource requirements
    withLabel:process_low {
        cpus   = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory = { check_max( 12.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_medium {
        cpus   = { check_max( 6     * task.attempt, 'cpus'    ) }
        memory = { check_max( 36.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_high {
        cpus   = { check_max( 12    * task.attempt, 'cpus'    ) }
        memory = { check_max( 72.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 16.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_long {
        time   = { check_max( 20.h  * task.attempt, 'time'    ) }
    }
}

// Execution profiles
profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    
    conda {
        conda.enabled          = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    
    docker {
        docker.enabled         = true
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    
    gcp {
        // Google Cloud Platform configuration
        google.enableRequesterPaysBuckets = true
        
        process {
            executor = 'google-batch'
            machineType = 'n1-standard-4'
            disk = '100 GB'
            preemptible = true
            
            // Use preemptible instances by default, fallback to regular
            errorStrategy = { task.attempt == 1 && task.exitStatus in [14,143,137] ? 'retry' : 'terminate' }
            maxRetries = 2
        }
        
        // Configure work directory in Google Cloud Storage
        workDir = params.google_bucket ? "${params.google_bucket}/work" : null
        
        google {
            project = params.google_project
            zone = params.google_zone
            batch {
                spot = true
                bootDiskSize = '50 GB'
            }
        }
    }
    
    test {
        // Test profile for CI/CD and local testing
        params {
            max_cpus   = 2
            max_memory = '6.GB'
            max_time   = '6.h'
        }
    }
}

// Manifest
manifest {
    name            = 'rare-disease-prioritization'
    author          = 'Your Name'
    homePage        = 'https://github.com/yourusername/rare-disease-prioritization'
    description     = 'Rare disease variant prioritization pipeline following GREGoR guidelines'
    mainScript      = 'workflows/rare_disease_demo.nf'
    nextflowVersion = '!>=22.10.1'
    version         = '1.0.0'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
